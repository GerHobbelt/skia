# Copyright (c) 2016-2022 Google LLC.
# Copyright (c) 2021-2022 Skia4Delphi Project.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../gn/skia.gni")
import("../third_party.gni")
import("icu.gni")

declare_args() {
  skia_use_system_icu = is_official_build
}

if (skia_use_system_icu) {
  system("icu") {
    defines = [ "U_USING_ICU_NAMESPACE=0" ]
    libs = [ "icuuc" ]
  }
} else {
  inline_data_assembly = "$target_gen_dir/icudtl_dat.cc"
  if (target_cpu == "wasm") {
    data_assembly = "$target_gen_dir/icudtl_dat.cpp"
  } else {
    data_assembly = "$target_gen_dir/icudtl_dat.S"
  }

  action("make_data_assembly") {
    outputs = [ data_assembly ]
    script = "scripts/make_data_assembly.py"
    if (target_cpu == "wasm") {
      inputs = [ "../externals/icu/flutter/icudtl.dat" ]
    } else {
      if (is_android) {
        inputs = [ "../externals/icu/android/icudtl.dat" ]
      } else if (is_ios) {
        inputs = [ "../externals/icu/ios/icudtl.dat" ]
      } else {
        inputs = [ "../externals/icu/common/icudtl.dat" ]
      }
    }
    
    args = [
      rebase_path(inputs[0], root_build_dir),
      rebase_path(data_assembly, root_build_dir),
    ]
    
    if (target_cpu == "wasm") {
      args += [ "--cpp" ]
    } else {
      if (is_mac || is_ios) {
        args += [ "--mac", "--pu" ]
      } else if (is_win) {
        args += [ "--win" ]
        if (target_cpu == "x86") {
          args += [ "--pu" ]
        }
      }
    }
  }

  action("make_inline_data_assembly") {
    args = rebase_path([
                         data_assembly,
                         inline_data_assembly,
                       ],
                       root_build_dir)

    deps = [ ":make_data_assembly" ]
    inputs = [ data_assembly ]
    outputs =  [ inline_data_assembly ]
    script = "scripts/asm_to_inline_asm.py"
  }

  third_party("headers") {
    public_defines = [
      "U_USING_ICU_NAMESPACE=0",
      "U_DISABLE_RENAMING",
    ]

    public_include_dirs = [
      "../externals/icu/source/common",
      "../externals/icu/source/i18n",
      ".",
    ]
  }

  third_party("icu") {
    public_defines = [
      "U_USING_ICU_NAMESPACE=0",
      "U_DISABLE_RENAMING",
    ]

    public_include_dirs = [
      "../externals/icu/source/common",
      "../externals/icu/source/i18n",
    ]

    configs = [ "//gn/portable:add_rtti" ]

    defines = [
      "_XOPEN_SOURCE=0",
      "U_COMMON_IMPLEMENTATION",
      "U_ENABLE_DYLOAD=0",
      "U_I18N_IMPLEMENTATION",
      "U_STATIC_IMPLEMENTATION",
    ]

    sources = icu_sources  
    if (target_cpu == "wasm") {
      defines += [ "__i386__" ]
    } else {
      if (is_win) {
        public_defines += [ "U_NOEXCEPT=" ]
        deps = [ ":make_inline_data_assembly" ]
        libs = [ "Advapi32.lib" ]
        sources += [ inline_data_assembly ]
      } else {
        deps = [ ":make_data_assembly" ]
        sources += [ data_assembly ]
      }
    }
  }
}
